name: Build and Push DevContainer

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 22 * * *'  # Daily at 6 AM Perth (GMT+8)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: wagov-dtt/devcontainer-base

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest-16core
            arch: amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm-16core
            arch: arm64
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      attestations: write

    steps:
    - uses: actions/checkout@v4
    
    - name: Set build date for cache busting
      id: date
      run: echo "value=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

    - name: Extract metadata (tags) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=schedule,pattern=nightly
          type=schedule,pattern=latest
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix={{branch}}-,enable={{is_default_branch}}
        flavor: |
          suffix=-${{ matrix.arch }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Build and test image (${{ matrix.arch }})
      uses: docker/bake-action@v6
      env:
        DATE: ${{ steps.date.outputs.value }}
        TAGS: ${{ steps.meta.outputs.tags }}
        ARCH: ${{ matrix.arch }}
        GITHUB_TOKEN: ${{ github.token }}
      with:
        source: .
        targets: build-test
        load: true
        set: |
          *.args.TARGETARCH=${{ matrix.arch }}

    - name: Set image tag for testing
      id: test-tag
      run: |
        TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
        if [ -z "$TAG" ]; then
          TAG="devcontainer-base:test"
        fi
        echo "value=$TAG" >> $GITHUB_OUTPUT

    - name: Test devcontainer functionality
      run: |
        docker run --privileged --rm \
          --mount source=dind-var-lib-docker,target=/var/lib/docker,type=volume \
          "${{ steps.test-tag.outputs.value }}" \
          -c "mise doctor && docker run --rm ghcr.io/curl/curl-container/curl-multi:master -s ipinfo.io && https ipinfo.io"

    - name: Scan for vulnerabilities
      uses: aquasecurity/trivy-action@0.32.0
      with:
        image-ref: ${{ steps.test-tag.outputs.value }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        trivy-config: 'trivy.yaml'

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'





  create-manifest:
    needs: build-and-test
    runs-on: ubuntu-latest-16core
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      attestations: write
    
    steps:
    - uses: actions/checkout@v4

    - name: Set build date for cache busting
      id: date
      run: echo "value=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Create and push multi-platform image
      uses: docker/bake-action@v6
      env:
        DATE: ${{ steps.date.outputs.value }}
        REGISTRY: ${{ env.REGISTRY }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_TOKEN: ${{ github.token }}
      with:
        source: .
        targets: release
        push: true
